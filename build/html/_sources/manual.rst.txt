=============
TAIPAN Manual
=============


The TAIPAN module contains the classes that organise the different tasks that
control TAIPAN.

#.. image:: images/TAIPAN_classes.png
#    :width: 1000px

To gain access, the module needs to be imported. Instantiating a class provides
access to its child methods and properties that belong to the class.

All methods return control to the calling script instantly. This is achieved by
embedding a lower level module (py2drama.py) that triggers an individual DRAMA
thread for each call. The DRAMA environment is accessed from py2drama via a C++
wrapper (dpython.py).


This multi-layered structure remains hidden to the Jeeves script and is made
available through the TAIPAN module. It is important to keep in mind the
multi-threading architecture running on the background in order to create the
necesary loops in the Jeeves script to avoid the code from finishing
prematurely. One way to achieve this is to create a loop of the form:

:Example: 
    >>> attempts = 0
    >>> While True: 
    >>>      if some_action(): 
    >>>         break 
    >>>      else 
    >>>         #try to fix it
    >>> 
    >>>      attempts += 1 
    >>>       
    >>>      if attempts>100: 
    >>>         #do somthing else



Quick Examples
==============

To allow access to the positioner through the object pos
--------------------------------------------------------

>>> import TAIPAN 
>>> pos = TAIPAN.Positioner()


To configure the positioner
---------------------------

>>> presetValues = {'tileFilename':'some_file.txt'} 
>>> pos.preset(presetValues)
>>> pos.configure()


To perform more than 1 action at the same time
----------------------------------------------

Assume an observation has just been finished and Jeeves is ready to readout,
slew and reconfigure simultaneously. The objects pos, tcs and drt have already
been linked to the positioner, telescope control system and data recorder
respectively. 

:Example: 
    >>> #These lines leave the positioner ready to configure
    >>> presetValues = {'tileFilename':'some_file.txt'} 
    >>> pos.preset(presetValues)

    >>> #These lines leave the telescope and dome ready to move 
    >>> presetValues = {'ra': 12.1234, 
    >>>                 'dec': -45.1234, 
    >>>                 'dome':'follow' } 
    >>> tcs.preset(presetValues)

    >>> #No need to change any presets in the data recorder (in this example)


    >>> #First we trigger the actions. 
    >>> #Each of these steps should be embedded in a while loop until successful or an alternative is decided. 
    >>> drt.readout() 
    >>> pos.configure() 
    >>> tcs.slew()

At this point of the code, all actions have been successfully sent but they
might not be completed. 

We run a new loop to check for completion.

>>> #this loop could also control the time and/or use a counter to decide on an
action in case of failure 
>>> While True: 
>>>   drt_status = drt.get_status()
>>>   pos_status = drt.get_status() 
>>>   tcs_status = drt.get_status() 
>>>  if ((drt_status==0) and (pos_status==0) and (tcs_status==0)): 
>>>       break 
>>>  else: 
>>>       #keep waiting or find out what's wrong and fix it 
>>> 
>>>  # a small pause can be added here to release some pressure from this loop

By the end of this loop TAIPAN is ready to start a new task. 


System Considerations
=====================

Error Handling
--------------

The TAIPAN module, as well as the lower level modules py2drama and dpython, are
designed to handle all foreseeable errors. Modules will always import and
methods should not produce unhandled errors. This is aimed towards letting
Jeeves run even when the background tasks don't behave as expected. All methods
available to Jeeves return True/False indicating their success. In addition,
the TAIPAN module provides several variables that can be monitored to allow
Jeeves to decide on a corrective action if necesary. 

Monitoring module import status - successDict
---------------------------------------------

Modules throughout the system include a dictionary called successDict that
reports the status of the module's components. This is used to capture the
result of an import.  

:Example: 
    >>> import TAIPAN
    >>> print TAIPAN.successDict {'py2drama': True, 'defaultValues': True, 'externalModules': True} 
    >>> print TAIPAN.p2d.successDict {'MSGLoop': True, 'dpythonModule': True, 'ctLink': True, 'externalModules': True}

It allows the calling module, usually Jeeves, to decide the following action
based on this result. Reading the different items in the successDict, an action
can be taken in case of error.


Logging
-------

TAIPAN includes a centralised logging module. All actions report to this module
using a text description of the action and a logging level. The 5 available
logging levels are DEBUG, INFO, WARNING, ERROR and CRITICAL. Each message has a
hard-coded logging level based on its severity. 

Log messages are written to a specified file, currently named TAIPAN.log that
resides in the TAIPAN folder. This is likely to change. Not all messages are
written to the file. The threshold level that sets the cutoff for what messages
make it to the file can be changed. During development is set to DEBUG (all
messages make it) and during standard operations is set to WARNING (only
WARNING, ERROR and CRITICAL messages end up in the file). The level of detail
written to this file can be set by using the function

>>> TAIPAN.set_logging_level(logLevel)

where logLevel can be any of the 5 logging levels. Any other keyword will leave
the level unchanged. 

